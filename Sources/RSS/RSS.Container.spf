import DOM 

@basis 
let containers:[Never] = 
[
    rss,
    channel,
    title,
    description,
    link,
    copyright,
    lastBuildDate,
    pubDate,
    ttl,
    item,
]

extension RSS 
{
    @frozen public 
    enum Container:String, CustomStringConvertible, Sendable
    {
        @matrix(__container__: containers)
        case __container__

        @inlinable public 
        var description:String
        {
            self.rawValue
        }
    }
}

@matrix(__container__: containers)
extension RSS.Element 
{
    @inlinable public static 
    func __container__<S>(escaped string:S, attributes:[Attribute] = []) -> Self 
        where S:StringProtocol
    {
        .__container__(Self.init(escaped: string), attributes: attributes)
    }
    @inlinable public static 
    func __container__<S>(_ string:S, attributes:[Attribute] = []) -> Self 
        where S:StringProtocol
    {
        .__container__(Self.init(string), attributes: attributes)
    }
    @inlinable public static 
    func __container__(attributes:[Attribute] = []) -> Self 
    {
        .__container__(EmptyCollection<Self>.init(), attributes: attributes)
    }
    @inlinable public static 
    func __container__(_ wrapped:Self, attributes:[Attribute] = []) -> Self 
    {
        .__container__(CollectionOfOne<Self>.init(wrapped), attributes: attributes)
    }
    @inlinable public static 
    func __container__<Content>(_ content:Content, attributes:[Attribute] = []) -> Self 
        where Content:Sequence, Content.Element == Self 
    {
        .init(node: .container(.__container__, 
            attributes: attributes.map(\.value), content: content.map(\.node)))
    }
}