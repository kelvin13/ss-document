import DOM 

@basis 
let containers:[Never] = 
[
    rss,
    channel,
    title,
    description,
    link,
    copyright,
    lastBuildDate,
    pubDate,
    ttl,
    item,
]

extension RSS 
{
    /// An RSS element type that can have children.
    @frozen public 
    enum Container:String, CustomStringConvertible, Sendable
    {
        @matrix(__container__: containers)
        case __container__

        @inlinable public 
        var description:String
        {
            self.rawValue
        }
    }
}

@matrix(__container__: containers)
extension RSS.Element 
{
    /// Creates an RSS `\(__container__)` element containing the given string.
    /// 
    /// This method does not escape the string, and should not be used to wrap 
    /// arbitrary strings. 
    @inlinable public static 
    func __container__<S>(escaped string:S, attributes:[Attribute] = []) -> Self 
        where S:StringProtocol
    {
        .__container__(Self.init(escaped: string), attributes: attributes)
    }
    /// @import(DOM)
    /// Creates an RSS `\(__container__)` element containing the given string, 
    /// replacing XML structural characters with XML character entities if needed.
    /// 
    /// This method is equivalent to calling ``DOM.escape(_:)`` on `string`, and 
    /// passing it to ``\(__container__)(escaped:attributes:)``.
    @inlinable public static 
    func __container__<S>(_ string:S, attributes:[Attribute] = []) -> Self 
        where S:StringProtocol
    {
        .__container__(Self.init(string), attributes: attributes)
    }
    /// Creates an RSS `\(__container__)` element with the given children. 
    @inlinable public static 
    func __container__(_ content:Self..., attributes:[Attribute] = []) -> Self 
    {
        .__container__(content, attributes: attributes)
    }
    /// Creates an RSS `\(__container__)` element with the given content. 
    @inlinable public static 
    func __container__<Content>(_ content:Content, attributes:[Attribute] = []) -> Self 
        where Content:Sequence, Content.Element == Self 
    {
        .init(node: .container(.__container__, 
            attributes: attributes.map(\.value), content: content.map(\.node)))
    }
}