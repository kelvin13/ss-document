import DOM 

@basis 
let containers:[Never] = 
[
    a,
    animate,
    animateMotion,
    animateTransform,
    circle,
    clipPath,
    defs,
    desc,
    discard,
    ellipse,
    feBlend,
    feColorMatrix,
    feComponentTransfer,
    feComposite,
    feConvolveMatrix,
    feDiffuseLighting,
    feDisplacementMap,
    feDistantLight,
    feDropShadow,
    feFlood,
    feFuncA,
    feFuncB,
    feFuncG,
    feFuncR,
    feGaussianBlur,
    feImage,
    feMerge,
    feMergeNode,
    feMorphology,
    feOffset,
    fePointLight,
    feSpecularLighting,
    feSpotLight,
    feTile,
    feTurbulence,
    filter,
    foreignObject,
    g,
    hatch,
    hatchpath,
    image,
    line,
    linearGradient,
    marker,
    mask,
    metadata,
    mpath,
    path,
    pattern,
    polygon,
    polyline,
    radialGradient,
    rect,
    script,
    set,
    stop,
    style,
    svg,
    `switch`,
    symbol,
    text,
    textPath,
    title,
    tspan,
    use,
    view,
]

extension SVG 
{
    @frozen public 
    enum Container:String, CustomStringConvertible, Sendable
    {
        @matrix(__container__: containers)
        case __container__

        @inlinable public 
        var description:String
        {
            self.rawValue
        }
    }
}

@matrix(__container__: containers)
extension SVG.Element 
{
    @inlinable public static 
    func __container__<S>(escaped string:S, attributes:[Attribute] = []) -> Self 
        where S:StringProtocol
    {
        .__container__(Self.init(escaped: string), attributes: attributes)
    }
    @inlinable public static 
    func __container__<S>(_ string:S, attributes:[Attribute] = []) -> Self 
        where S:StringProtocol
    {
        .__container__(Self.init(string), attributes: attributes)
    }
    @inlinable public static 
    func __container__(attributes:[Attribute] = []) -> Self 
    {
        .__container__(EmptyCollection<Self>.init(), attributes: attributes)
    }
    @inlinable public static 
    func __container__(_ wrapped:Self, attributes:[Attribute] = []) -> Self 
    {
        .__container__(CollectionOfOne<Self>.init(wrapped), attributes: attributes)
    }
    @inlinable public static 
    func __container__<Content>(_ content:Content, attributes:[Attribute] = []) -> Self 
        where Content:Sequence, Content.Element == Self 
    {
        .init(node: .container(.__container__, 
            attributes: attributes.map(\.value), content: content.map(\.node)))
    }
}