import Glibc

// blah
@basis 
let foos:[Never] = 
[
    A, 
    B, 
    C,
]

@basis 
let bars:[Never] = 
[
    X, 
    Y, 
    Z,
]
@basis 
let strings:[Never] = 
[
    "xxx", 
    "yyy", 
    "zzz",
]

/// this is a doccomment
@matrix(__Foo__: foos)
enum __Foo__:Sendable 
{
    /// this is another doccomment
    /// with many lines, and it 
    /// mentions ``\(__Foo__)``.
    /// 
    /// ```swift
    /// // nested comments and string 
    /// // interpolations work!
    /// let string:String = 
    /// """
    /// \(Self.\(__Foo__).string)
    /// """
    /// ```
    @matrix(__Foo__: foos)
    @matrix(__Bar__: bars, __string__: strings)
    enum __Foo__:__Bar__
    {
        @basis 
        let foos2:[Never] = 
        [
            A, 
            B, 
            C,
        ]

        static 
        var string:String { __string__ }
    }
}
@matrix(__Bar__: bars)
protocol __Bar__:Sendable 
{
    var __Bar__:Int { get }
}

extension DOM.Element where Domain == HTML 
{
    @matrix(__ordinal__: [i, j, k], __value__: [0, 1, 2])
    @inlinable public 
    var __ordinal__:Int 
    {
        __value__
    }

    @matrix(__case__: [a, b])
    @inlinable public static 
    func __case__(_ string:String, @Attributes attributes:() -> [Attribute] = { [] }) -> Self 
    {
        .__case__(.text(escaping: __case__.rawValue), attributes: attributes)
    }
}